'''
A Convolutional Network implementation example using TensorFlow library.
This example is using the MNIST database of handwritten digits
(http://yann.lecun.com/exdb/mnist/)
Author: Aymeric Damien
Project: https://github.com/aymericdamien/TensorFlow-Examples/
'''

from __future__ import print_function

import tensorflow as tf
import timeit
import numpy as np

# Import MNIST data
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("/home/drevil/Downloads/MNINST/", one_hot=True)

# Parameters
learning_rate = 0.001
training_iters = 50000
batch_size = 128
display_step = 10

# Network Parameters
n_input = 784 # MNIST data input (img shape: 28*28)
n_classes = 10 # MNIST total classes (0-9 digits)
dropout = 0.75 # Dropout, probability to keep units

# tf Graph input
x = tf.placeholder(tf.float32, [None, n_input])
y = tf.placeholder(tf.float32, [None, n_classes])
keep_prob = tf.placeholder(tf.float32) #dropout (keep probability)


# Create some wrappers for simplicity
def conv2d(x, W, b, strides=1):
    # Conv2D wrapper, with bias and relu activation
    x = tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')
    x = tf.nn.bias_add(x, b)
    return tf.nn.relu(x)


def maxpool2d(x, k):
    # MaxPool2D wrapper
    return tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1],
                          padding='SAME')


# Create model
def conv_net(x, weights, biases, dropout):
 

    # Reshape input picture
    x = tf.reshape(x, shape=[-1, 28, 28, 1])
 
    # Convolution Layer
    conv1 = conv2d(x, weights['wc1'], biases['bc1'])
   # Max Pooling (down-sampling)
    conv1 = maxpool2d(conv1, 2)

    # Fully connected layer
    # Reshape conv2 output to fit fully connected layer input
    fc1 = tf.reshape(conv1, [-1, weights['wd1'].get_shape().as_list()[0]])
    fc1 = tf.add(tf.matmul(fc1, weights['wd1']), biases['bd1'])
    fc1 = tf.nn.relu(fc1)
    tf.histogram_summary('fc1', fc1)
    # Apply Dropout
    fc1 = tf.nn.dropout(fc1, dropout)

    # Output, class prediction
    out = tf.add(tf.matmul(fc1, weights['out']), biases['bout'])
    return out

# Store layers weight & bias
wc1 = tf.Variable(tf.truncated_normal([5, 5, 1, 20],stddev=.1,  name="wc1"))
wd1 = tf.Variable(tf.truncated_normal([14*14*20, 500],stddev=.1, name="wd1"))
wout = tf.Variable(tf.truncated_normal([500, n_classes],stddev=.1))

weights = {
    'wc1': wc1,
    'wd1': wd1,
    'out': wout
}

bc1 = tf.Variable(tf.truncated_normal([20],stddev=0.1), name="bc1")
bd1 = tf.Variable(tf.truncated_normal([500],stddev=0.1),name="bd1")
bout = tf.Variable(tf.truncated_normal([n_classes],stddev=0.1))

biases = {
    'bc1': bc1,
    'bd1': bd1,
    'bout': bout
}



# Construct model
pred = conv_net(x, weights, biases, keep_prob)
# tf.scalar_summary('pred', pred)
with tf.device('/cpu:0'): 
  cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(pred, y))

with tf.device('/cpu:0'):
  optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)

 # Evaluate model
correct_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))
accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))
tf.scalar_summary('cost', cost)
merge = tf.merge_all_summaries()
 

# Initializing the variables
init = tf.initialize_all_variables()

# Launch the graph
with tf.Session() as sess:
    sess.run(init)
    step = 1
    writer = tf.train.SummaryWriter('./',sess.graph)

    start_time = timeit.default_timer()
    # Keep training until reach max iterations
    while step * batch_size < training_iters:
        batch_x, batch_y = mnist.train.next_batch(batch_size)
        # Run optimization op (backprop)
        
        sess.run(optimizer, feed_dict={x: batch_x, y: batch_y,
                                        keep_prob: dropout})
      
        if step % display_step == 0:
            # Calculate batch loss and accuracy
            summary, loss, acc = sess.run([merge, cost, accuracy], feed_dict={x: batch_x,
                                                              y: batch_y,
                                                              keep_prob: 1.})
           # writer.add_summary(summary, step)  
           # tf.scalar_summary('loss', loss)
            print("Iter " + str(step*batch_size) + ", Minibatch Loss= " + \
                  "{:.6f}".format(loss) + ", Training Accuracy= " + \
                  "{:.5f}".format(acc))
        step += 1
    print("Optimization Finished!")
  
    end_time = timeit.default_timer()
   # saver.save(sess, "./conv1.bias.bin")

   # saver.save(sess, 'trained_model.sd')
    print("Total time is %s" % (end_time - start_time))
 
    # Calculate accuracy for 256 mnist test images

    accuracy = sess.run(accuracy, feed_dict={x: mnist.test.images[:256],
                                      y: mnist.test.labels[:256],
                                      keep_prob: 1.})
    print("*******TEST ACCURACY*******************", accuracy)
    # Get the biases and write them to bin files
    bc1, bd1, bout = sess.run([bc1,bd1,bout])
 
    btemp=np.ones([20], dtype=np.float32)
    btemp[:] = bc1[:]
    outbytes=bytearray(btemp)
    newFile = open("./conv1.bias.bin", "wb")
    newFile.write(outbytes)
    newFile.close();

    btemp=np.ones([500], dtype=np.float32)
    btemp[:] = bd1[:]
    outbytes=bytearray(btemp)
    newFile = open("./ip1.bias.bin", "wb")
    newFile.write(outbytes)
    newFile.close();

    btemp=np.ones([n_classes], dtype=np.float32)
    btemp[:] = bout[:]
    outbytes=bytearray(btemp)
 
    newFile = open("./ip2.bias.bin", "wb")
    newFile.write(outbytes)
    newFile.close();

    # Get the biases and write them to bin files
    wc1, wd1, wout = sess.run([wc1,wd1,wout])
    print("0,0:", wc1[:,:,0,0])
    print("0,1:", wc1[:,:,0,1])

    outbytes=bytearray(wc1.flatten())
    newFile = open("./conv1.bin", "wb")
    newFile.write(outbytes)
    newFile.close();

    outbytes=bytearray(wd1)
    newFile = open("./ip1.bin", "wb")
    newFile.write(outbytes)
    newFile.close();
    outbytes=bytearray(wout)
    newFile = open("./ip2.bin", "wb")
    newFile.write(outbytes)
    newFile.close();


    
  
writer.close()
